* Proof-of-concept
- game is played on one laptop using cljc files, the REPL, and tests for the game logic
- Initial state is 'not ready'; there are less than three players.
- Once three players have joined via WebSocket, the game starts.
- Each player takes their turn according to the rules in 'codenames.md'
  - the game's state will be persisted using Datahike
* What do we need in order to simulate one full round of gameplay?
- (fn game-state turn)
  - turn for a selector consists of: player id and hint
  - turn for a guesser consists of: player id and guess
  - game state is
    - vector of 25 words
    - for selector 1 and selector 2, their vectors of indices into the full vector of available. Also, store the words that have correctly guessed.
    - current player
  - when one of the two players gets all of their words guessed correctly, then the game is finished and one player is the winner.
    - at this point, we can move back to the 'not-ready' state.
* RESOLVED move word_utils, word_assoc, word_reader, etc. into word_assoc
  CLOSED: [2019-01-26 Sat 11:21]
** RESOLVED move unit tests for word-related logic
   CLOSED: [2019-02-02 Sat 11:09]
* TODO Project-level
** TODO where can we host our application?
** TODO continuous integration, preferably using CircleCI
* TODO add remaining game logic
  SCHEDULED: <2019-02-02 Sat>
** RESOLVED whose turn it is
   CLOSED: [2019-02-02 Sat 11:09]
** TODO if it's the guesser's turn, let them enter a guess and show the previous player's hint
** TODO if it's the player's turn, let them enter a hint
** TODO if the guesser picks a correct word, update the guessed words appropriately
** TODO ending the game once one of the players has all of their words guessed
** TODO restarting the game once it's over
** WAITING transitioning from 'not-ready' to 'ready', keeping track of how many of the three required players there are
- this last one is waiting for our concept of a multiplayer game
- a 'join' action that connects a player to the game
* TODO client-side GUI
  SCHEDULED: <2019-02-02 Sat>
** TODO show how many words the previous player's hint applies to
** TODO show the previous player's hint
** RESOLVED render state as a vector of rects, suitable for consumption by play-cljs
   CLOSED: [2019-01-26 Sat 11:23]
** RESOLVED display hard-coded squares
   CLOSED: [2019-01-26 Sat 11:22]
** RESOLVED display the 25 words in a grid
   CLOSED: [2019-02-02 Sat 11:10]
*** RESOLVED place each word into a square
    CLOSED: [2019-02-02 Sat 11:10]
*** RESOLVED logic to pick the colour for each square based on whether it has been guessed or not
    CLOSED: [2019-02-02 Sat 11:10]
** RESOLVED display the current player
   CLOSED: [2019-02-02 Sat 11:10]
** RESOLVED [#B] game logic
   CLOSED: [2019-02-02 Sat 11:19] SCHEDULED: <2019-02-02 Sat>
*** RESOLVED if it's the guesser's turn, allow them to enter their guess
    CLOSED: [2019-02-02 Sat 11:19]
*** RESOLVED if it's selector 1's or selector 2's turn, then allow them to enter a hint
    CLOSED: [2019-02-02 Sat 11:19]
* TODO [#D] move & remove other 'playground' or 'experimental' files, esp. for server-side and db-specific logic
** TODO some cljs files in rum-sample folder
** TODO refactoring existing code
   SCHEDULED: <2019-02-02 Sat>
e.g. change game state to be a single atom, moving deeply-nested logic into shallow groups of functions, and separating the GUI rendering behaviour from the game logic.
* WAITING [#A] implement server & WebSocket logic
  SCHEDULED: <2019-02-09 Sat>
I think we should do this as a group, perhaps as pairs working on the client and server aspects of the connection.
** TODO Server listens on a WebSocket port
** TODO Clients connect to WebSocket upon visiting a Web page
** TODO Data is persisted on the server side and shared with each client
* Final version
Players visit a Web site to join a game. Once there are three players the game begins.
The server provides a WebSocket for all three players to join a single game.
* TODO replace play-cljs with Hiccup
  SCHEDULED: <2019-02-02 Sat>
Could render SVG graphics or as html elements style with CSS. CSS would give us an opportunity to use Garden.
